/****************************************************************************
 *
 *   Copyright (C) 2013-2020 PX4 Development Team. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name PX4 nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/* Auto-generated by genmsg_cpp from file vehicle_command.msg */


#pragma once


#include <uORB/uORB.h>

//#include <uORB/topics/VEHICLE_CMD_enum.h>//Use external definition

#ifndef __cplusplus
#define VEHICLE_COMMAND_PREFLIGHT_CALIBRATION_TEMPERATURE_CALIBRATION 3
#define VEHICLE_COMMAND_ORB_QUEUE_LENGTH 3

#endif


#ifdef __cplusplus
struct __EXPORT vehicle_command_s {
enum class VEHICLE_CMD : uint16_t {
	CUSTOM_0 = 0,
	CUSTOM_1 = 1,
	CUSTOM_2 = 2,
	NAV_WAYPOINT = 16,
	NAV_LOITER_UNLIM = 17,
	NAV_LOITER_TURNS = 18,
	NAV_LOITER_TIME = 19,
	NAV_RETURN_TO_LAUNCH = 20,
	NAV_LAND = 21,
	NAV_TAKEOFF = 22,
	NAV_PRECLAND = 23,
	DO_ORBIT = 34,
	NAV_ROI = 80,
	NAV_PATHPLANNING = 81,
	NAV_VTOL_TAKEOFF = 84,
	NAV_VTOL_LAND = 85,
	NAV_GUIDED_LIMITS = 90,
	NAV_GUIDED_MASTER = 91,
	NAV_GUIDED_ENABLE = 92,
	NAV_DELAY = 93,
	NAV_LAST = 95,
	CONDITION_DELAY = 112,
	CONDITION_CHANGE_ALT = 113,
	CONDITION_DISTANCE = 114,
	CONDITION_YAW = 115,
	CONDITION_LAST = 159,
	DO_SET_MODE = 176,
	DO_JUMP = 177,
	DO_CHANGE_SPEED = 178,
	DO_SET_HOME = 179,
	DO_SET_PARAMETER = 180,
	DO_SET_RELAY = 181,
	DO_REPEAT_RELAY = 182,
	DO_SET_SERVO = 183,
	DO_REPEAT_SERVO = 184,
	DO_FLIGHTTERMINATION = 185,
	DO_LAND_START = 189,
	DO_GO_AROUND = 191,
	DO_REPOSITION = 192,
	DO_PAUSE_CONTINUE = 193,
	DO_SET_ROI_LOCATION = 195,
	DO_SET_ROI_WPNEXT_OFFSET = 196,
	DO_SET_ROI_NONE = 197,
	DO_CONTROL_VIDEO = 200,
	DO_SET_ROI = 201,
	DO_DIGICAM_CONTROL = 203,
	DO_MOUNT_CONFIGURE = 204,
	DO_MOUNT_CONTROL = 205,
	DO_SET_CAM_TRIGG_DIST = 206,
	DO_FENCE_ENABLE = 207,
	DO_PARACHUTE = 208,
	DO_MOTOR_TEST = 209,
	DO_INVERTED_FLIGHT = 210,
	DO_SET_CAM_TRIGG_INTERVAL = 214,
	DO_MOUNT_CONTROL_QUAT = 220,
	DO_GUIDED_MASTER = 221,
	DO_GUIDED_LIMITS = 222,
	DO_LAST = 240,
	PREFLIGHT_CALIBRATION = 241,
	PREFLIGHT_SET_SENSOR_OFFSETS = 242,
	PREFLIGHT_STORAGE = 245,
	PREFLIGHT_REBOOT_SHUTDOWN = 246,
	MISSION_START = 300,
	COMPONENT_ARM_DISARM = 400,
	START_RX_PAIR = 500,
	SET_CAMERA_MODE = 530,
	DO_TRIGGER_CONTROL = 2003,
	DO_VTOL_TRANSITION = 3000,
	ARM_AUTHORIZATION_REQUEST = 3001,
	PAYLOAD_PREPARE_DEPLOY = 30001,
	PAYLOAD_CONTROL_DEPLOY = 30002,
	PREFLIGHT_UAVCAN = 243,
	LOGGING_START = 2510,
	LOGGING_STOP = 2511,
	CONTROL_HIGH_LATENCY = 2600,
};

enum class VEHICLE_CMD_RESULT : uint8_t {
	ACCEPTED = 0,
	TEMPORARILY_REJECTED = 1,
	DENIED = 2,
	UNSUPPORTED = 3,
	FAILED = 4,
	IN_PROGRESS = 5,
};

enum class VEHICLE_MOUNT_MODE : uint8_t {
	RETRACT = 0,
	NEUTRAL = 1,
	MAVLINK_TARGETING = 2,
	RC_TARGETING = 3,
	GPS_POINT = 4,
};

enum class VEHICLE_ROI : uint8_t {
	NONE = 0,
	WPNEXT = 1,
	WPINDEX = 2,
	LOCATION = 3,
	TARGET = 4,
};


#else
struct vehicle_command_s {
#endif
	uint64_t timestamp;
	double param5;
	double param6;
	float param1;
	float param2;
	float param3;
	float param4;
	float param7;
	VEHICLE_CMD command;
	uint8_t target_system;
	uint8_t target_component;
	uint8_t source_system;
	uint8_t source_component;
	uint8_t confirmation;
	bool from_external;
	uint8_t _padding0[2]; // required for logger


#ifdef __cplusplus
	static constexpr uint16_t PREFLIGHT_CALIBRATION_TEMPERATURE_CALIBRATION = 3;
	static constexpr uint8_t ORB_QUEUE_LENGTH = 3;

#endif
};

/* register this as object request broker structure */
ORB_DECLARE(vehicle_command);


#ifdef __cplusplus
void print_message(const vehicle_command_s& message);
#endif
